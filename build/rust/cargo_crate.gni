# Copyright 2021 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/rust.gni")
import("//build/rust/rust_target.gni")

# This template allows for building Cargo crates within gn.
#
# Arguments:
#  sources
#  crate_root
#  epoch
#  configs
#  deps
#  features
#  skip_unit_tests
#  edition
#  crate_name
#    All just as in rust_source_set.gni
#
#  dev_deps
#    Same meaning as test_deps in rust_source_set.gni, but called
#    dev_deps to match Cargo.toml better.
#
#  build_root (optional)
#    Filename of build.rs build script.
#
#  build_deps (optional)
#    Build script dependencies
#
#  build_sources (optional)
#    List of sources for build script. Must be specified if
#    build_root is specified.
#
#  build_script_outputs (optional)
#    List of .rs files generated by the build script, if any.
#    Fine to leave undefined even if you have a build script.
#    This doesn't directly correspond to any Cargo variable,
#    but unfortunately is necessary for gn to build its dependency
#    trees automatically.
#    Many build scripts just output --cfg directives, in which case
#    no source code is generated and this can remain empty.
#
#  build_script_inputs (optional)
#    If the build script reads any files generated by build_deps,
#    as opposed to merely linking against them, add a list of such
#    files here. Again, this doesn't correspond to a Cargo variable
#    but is necessary for gn.
#
#  crate_type "bin", "proc-macro" or "rlib" (optional)
#    Whether to build an executable. The default is "rlib".
#    At present others are not supported.

template("cargo_crate") {
  orig_target_name = target_name

  if (defined(invoker.build_root)) {
    # Executables need to have unique names. Work out a prefix.
    _cratelabel = orig_target_name
    if (defined(invoker.crate_name)) {
      _cratelabel = invoker.crate_name
    }
    _epochlabel = "vunknown"
    if (defined(invoker.epoch)) {
      _tempepoch = string_replace(invoker.epoch, ".", "")
      _epochlabel = "v${_tempepoch}"
    }
    build_script_name = "${_cratelabel}_${_epochlabel}_build_script"
  }

  # The main target, either a Rust source set or an executable
  rust_target(target_name) {
    # Work out what we're building
    crate_type = "rlib"
    if (defined(invoker.crate_type)) {
      crate_type = invoker.crate_type
    }
    if (crate_type == "bin") {
      target_type = "executable"
      assert(!defined(invoker.epoch))
    } else if (crate_type == "proc-macro") {
      target_type = "rust_proc_macro"
    } else {
      assert(crate_type == "rlib")
      target_type = "rust_library"
    }

    # C++ should never bind directly to a third party crate.
    create_cpp_groups = false

    forward_variables_from(invoker,
                           "*",
                           [
                             "build_root",
                             "build_deps",
                             "build_sources",
                             "target_type",
                             "visibility",
                             "testonly",
                           ])

    if (defined(invoker.build_root)) {
      # Uh-oh, we have a build script
      if (!defined(deps)) {
        deps = []
      }
      if (!defined(sources)) {
        sources = []
      }
      if (!defined(rustflags)) {
        rustflags = []
      }
      if (defined(invoker.dev_deps)) {
        test_deps = invoker.dev_deps
      }

      # This... is a bit weird. We generate a file called cargo_flags.rs which
      # does not actually contain Rust code, but instead some flags to add
      # to the rustc command line. We need it to end in a .rs extension so that
      # we can include it in the 'sources' line and thus have dependency
      # calculation done correctly. data_deps won't work because targets don't
      # require them to be present until runtime.
      flags_file = get_label_info(":${orig_target_name}_build_script_output",
                                  "target_out_dir") + "/cargo_flags.rs"
      rustflags += [ "@" + rebase_path(flags_file) ]
      sources += [ flags_file ]
      deps += [ ":${build_script_name}_output" ]
    } else {
      not_needed([ "orig_target_name" ])
    }
  }

  if (defined(invoker.build_root)) {
    # Extra targets required to make build script work
    action("${build_script_name}_output") {
      script = rebase_path("//build/rust/run_build_script.py")
      build_script_target = ":${build_script_name}($host_toolchain)"
      deps = [ build_script_target ]
      flags_file = "$target_out_dir/cargo_flags.rs"
      build_script_out_dir = get_label_info(build_script_target, "root_out_dir")
      build_script = "$build_script_out_dir/${build_script_name}"
      if (is_win) {
        build_script = "${build_script}.exe"
      }
      args = [
        "--build-script",
        rebase_path(build_script),
        "--output",
        rebase_path(flags_file),
        "--rust-prefix",
        rust_prefix,
        "--out-dir",
        target_out_dir,
      ]
      if (defined(rust_abi_target) && rust_abi_target != "") {
        args += [
          "--target",
          rust_abi_target,
        ]
      }
      inputs = [ build_script ]
      outputs = [ flags_file ]
      if (defined(invoker.build_script_outputs)) {
        outputs += invoker.build_script_outputs
      }
      if (defined(invoker.build_script_inputs)) {
        inputs += invoker.build_script_inputs
      }
    }

    if (current_toolchain == host_toolchain) {
      rust_target(build_script_name) {
        target_type = "executable"
        create_cpp_groups = false
        skip_unit_tests = true
        sources = invoker.build_sources
        crate_root = invoker.build_root
        if (defined(invoker.build_deps)) {
          deps = invoker.build_deps
        }
        forward_variables_from(invoker,
                               [
                                 "features",
                                 "edition",
                                 "rustflags",
                                 "configs",
                               ])
      }
    } else {
      not_needed(invoker,
                 [
                   "build_sources",
                   "build_deps",
                   "build_root",
                 ])
    }
  }
}
