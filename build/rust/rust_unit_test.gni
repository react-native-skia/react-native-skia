# Copyright 2021 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/rust.gni")

# Defines a Rust unit test.
#
# At present this is simply an executable; future iterations of this template
# may do something smarter with the test code in order to contribute it to
# test suites.
#
# Parameters
#
#   sources
#   edition (optional)
#   configs (optional)
#   deps (optional)
#   crate_root (optional)
#   features (optional)
#   rustflags (optional)
#     All as in rust_source_set.
#
# Example of usage:
#
#   rust_unit_test("foo_tests") {
#     deps = [
#       "//third_party/rust/test_utils/v1:lib",
#     ]
#     sources = [ "src/lib.rs" ]
#   }

template("rust_unit_test") {
  if (defined(invoker.crate_root)) {
    _crate_root = invoker.crate_root
  } else {
    _crate_root = "src/lib.rs"
  }
  _rustflags = invoker.rustflags
  if (defined(invoker.features)) {
    foreach(i, invoker.features) {
      _rustflags += [ "--cfg=feature=\"${i}\"" ]
    }
  }
  _configs = invoker.configs
  if (defined(invoker.edition) && invoker.edition == "2015") {
    _configs += [ "//build/rust:edition_2015" ]
  } else {
    _configs += [ "//build/rust:edition_2018" ]
  }

  # We require that all source files are listed, even though this is
  # not a requirement for rustc. The reason is to ensure that tools
  # such as `gn deps` give the correct answer, and thus we trigger
  # the right test suites etc. on code change.
  # TODO(crbug.com/1256930) - verify this is correct
  assert(defined(invoker.sources), "sources must be listed")

  # TODO(crbug.com/1229320): Arrange to run test executables on try bots.
  # TODO(crbug.com/gn/146): Allow Rust executables to depend on C/C++ source sets.
  # This is important in cases where Rust tests may depend upon C/C++
  # dependencies.
  executable(target_name) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "edition",
                             "features",
                             "rustflags",
                             "configs",
                             "output_name",
                             "crate_name",
                             "crate_root",
                           ])
    rustflags = [
      "--cfg",
      "feature=\"test\"",
      "--test",
    ]
    rustflags += _rustflags
    configs += _configs
    crate_root = _crate_root
  }
}

set_defaults("rust_unit_test") {
  configs = []
  deps = []
  rustflags = []
}
