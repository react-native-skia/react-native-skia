# Copyright 2021 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/rust.gni")
import("//build/rust/rust_static_library.gni")
import("//build/rust/rust_target.gni")

# Defines a target containing both Rust and C++ code, with bidirectional calls.
# It's rare to use this target directly - instead please use
# mixed_static_library or, less commonly, mixed_component.
#
# This intent of this template is to make it as easy as possible to add Rust
# code into an existing C++ target.
#
# Downstream C++ and Rust targets can both depend on this target, and will gain
# access to their applicable code.
#
# Parameters
#
#   sources
#   configs
#   deps
#   etc. etc. etc.
#     Parameters for C++ target. All parameters not starting with
#     'rs_' are passed directly to the underlying C++ target
#     (static_library, component etc.)
#
#   rs_sources
#   rs_epoch
#   rs_edition
#   rs_configs
#   rs_deps
#   rs_public_deps
#   rs_crate_name
#   rs_crate_root
#   rs_generate_crate_root
#   rs_features
#   rs_cxx_bindings
#     Rust parameters. Same meaning as in 'rust_static_library' without the
#     'rs_' prefix, e.g. rs_configs here means the same as 'configs' in
#     rust_static_library.
#
#   rs_build_native_rust_unit_tests
#     This is used by Rust build tests, but should not be used in Chromium
#     code. Instead, prefer to write gtest tests. See how to do that in
#     //testing/rust_gtest_interop/README.md.
#
# In the event that Rust is not enabled in the build, this will produce a
# plain C/C++ target.
#
# If Rust is enabled, a #define ENABLE_RUST will be applied to the C/C++
# code.
#
# Implementation note: this target generally leans heavily on the
# rust_static_library.gni template to build its Rust code (which in turn is
# just a rust_target.gni in slightly fancy clothes). However, the exception
# is for the C++ side of any [auto]cxx bindings. These are built and managed directly
# by this template instead of deferring to the facilities in rust_target.gni,
# because we want the resulting bindings to be built as part of the pre-existing
# C++ source_set. This is partly to reduce target proliferation, partly to avoid
# having to use 'allow_circular_includes' and deal with layering violations,
# and partly because other targets elsewhere in the codebase might have
# visibility rules which refer to this source_set by name, and wouldn't allow
# a C++/Rust bindings source_set to have visibility into the same headers.

template("mixed_target") {
  _target_name = target_name

  _known_rs_variables = [
    "rs_epoch",
    "rs_edition",
    "rs_configs",
    "rs_deps",
    "rs_public_deps",
    "rs_sources",
    "rs_features",
    "rs_cxx_bindings",
    "rs_crate_name",
    "rs_crate_root",
    "rs_build_native_rust_unit_tests",
    "rs_generate_crate_root",
  ]

  # TODO(crbug.com/1280708, crbug.com/1304707): Drop toolchain_has_rust after we have support for
  # all our toolchains: NaCl, Linux x86, etc.
  _rs_enable = enable_rust && toolchain_has_rust

  # Conceivably, conditional statements in the template invocation
  # might result in no rs_sources files. If so, don't build any Rust.
  if (!defined(invoker.rs_sources) || invoker.rs_sources == []) {
    _rs_enable = false
  }

  if (_rs_enable) {
    rust_static_library("${_target_name}_rs") {
      crate_name = _target_name
      mutually_dependent_target = ":${_target_name}"
      mutually_dependent_public_deps = []
      if (defined(invoker.public_deps)) {
        mutually_dependent_public_deps = invoker.public_deps
      }
      if (defined(invoker.rs_epoch)) {
        epoch = invoker.rs_epoch
      }
      if (defined(invoker.rs_edition)) {
        edition = invoker.rs_edition
      }
      if (defined(invoker.rs_configs)) {
        # The `configs` will always be non-empty due to `set_defaults()` which
        # sets them for each type of rust target.
        configs += invoker.rs_configs
      }
      if (defined(invoker.rs_sources)) {
        sources = invoker.rs_sources
      }
      if (defined(invoker.rs_features)) {
        features = invoker.rs_features
      }
      if (defined(invoker.rs_deps)) {
        deps = invoker.rs_deps
      }
      if (defined(invoker.rs_public_deps)) {
        public_deps = invoker.rs_public_deps
      }
      if (defined(invoker.rs_crate_root)) {
        crate_root = invoker.rs_crate_root
      }
      if (defined(invoker.rs_generate_crate_root)) {
        generate_crate_root = invoker.rs_generate_crate_root
      }
      if (defined(invoker.rs_crate_name)) {
        crate_name = invoker.rs_crate_name
      }
      build_native_rust_unit_tests = false
      if (defined(invoker.rs_build_native_rust_unit_tests)) {
        build_native_rust_unit_tests = invoker.rs_build_native_rust_unit_tests
      }
      if (defined(invoker.testonly) && invoker.testonly) {
        testonly = true
      }
      if (defined(invoker.rs_cxx_bindings)) {
        cxx_bindings = invoker.rs_cxx_bindings
      }

      # The mixed target can depend on the _rs Rust parts, but nothing else can.
      visibility = [ ":${_target_name}" ]

      # Force the rust target to be able to be depended on from C++, even if
      # there are no C++ bindings generated with Cxx.
      support_use_from_cpp = true
    }
  } else {
    not_needed(invoker, _known_rs_variables)
  }

  target(invoker.target_type, _target_name) {
    forward_variables_from(
        invoker,
        "*",
        TESTONLY_AND_VISIBILITY + _known_rs_variables + [ "target_type" ])
    forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)

    if (_rs_enable) {
      if (!defined(public_deps)) {
        public_deps = []
      }

      # Rust targets can depend on this target, and they need to inherit access
      # to the rust library contained within, so we list it in public_deps.
      public_deps += [ ":${_target_name}_rs" ]

      if (defined(visibility)) {
        if (defined(invoker.rs_build_native_rust_unit_tests) &&
            invoker.rs_build_native_rust_unit_tests) {
          _unit_test_target = "${_target_name}_rs_unittests"
          if (defined(invoker.rs_unit_test_target)) {
            _unit_test_target = invoker.rs_unit_test_target
          }
          visibility += [ ":${_unit_test_target}_exe" ]
        }
      }
    }
  }
}
