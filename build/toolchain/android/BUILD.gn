# Copyright 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/android/config.gni")
import("//build/config/clang/clang.gni")
import("//build/config/compiler/compiler.gni")
import("//build/config/ozone.gni")
import("//build/config/sysroot.gni")  # Imports android/config.gni.
import("//build/toolchain/gcc_toolchain.gni")

declare_args() {
  # Whether unstripped binaries, i.e. compiled with debug symbols, should be
  # considered runtime_deps rather than stripped ones.
  android_unstripped_runtime_outputs = true
}

# Parameters:
#  - binary_prefix
#      Prefix of compiler executables.
template("android_clang_toolchain") {
  clang_toolchain(target_name) {
    assert(defined(invoker.toolchain_args),
           "toolchain_args must be defined for android_clang_toolchain()")

    # Android toolchains need to declare .dwp files as outputs, so need to know
    # the value of "use_debug_fission" when defining them.
    # The derived value of "use_debug_fission" varies based on current_os, but
    # toolchain definitions are evaluated under the default toolchain.
    # Rather than computing the value under current_os="android", just disable
    # it if target_os != "android".
    _use_debug_fission = use_debug_fission && target_os == "android"

    toolchain_args = {
      forward_variables_from(invoker.toolchain_args, "*")
      current_os = "android"
      use_debug_fission = _use_debug_fission
    }

    # Output linker map files for binary size analysis.
    enable_linker_map = true

    strip = rebase_path("$clang_base_path/bin/llvm-strip", root_build_dir)
    if (_use_debug_fission) {
      # llvm-dwp does not work with thin lto, so use binutils one.
      # https://crbug.com/1264130
      dwp = rebase_path(
              "$android_toolchain_root/bin/${invoker.binary_prefix}-dwp",
              root_build_dir)
    }

    use_unstripped_as_runtime_outputs = android_unstripped_runtime_outputs

    # Don't use .cr.so for loadable_modules since they are always loaded via
    # absolute path.
    loadable_module_extension = ".so"
  }
}

android_clang_toolchain("android_clang_x86") {
  if (use_debug_fission && target_os == "android") {
    binary_prefix = "i686-linux-android"
  }
  toolchain_args = {
    current_cpu = "x86"

    # We lack the libclang_rt.profile library for x86 and x86_64, so we cannot
    # link any binaries that are generated with coverage instrumentation.
    # Therefore we need to turn off 'use_clang_coverage' for this toolchain.
    # TODO(crbug.com/865376)
    use_clang_coverage = false

    # This turns off all of the LaCrOS-specific flags. A LaCrOS related build
    # may use |ash_clang_x64| or |lacros_clang_x64| toolchain, which are
    # chromeos toolchains, to build Ash-Chrome or Lacros-Chrome in a
    # subdirectory, and because chromeos toolchain uses android toolchain, which
    # eventually resulted in that android toolchains being used inside a LaCrOS
    # build.
    also_build_ash_chrome = false
    also_build_lacros_chrome = false
    chromeos_is_browser_only = false
    ozone_platform = ""
    ozone_platform_wayland = false
  }
}

android_clang_toolchain("android_clang_arm") {
  if (use_debug_fission && target_os == "android") {
    binary_prefix = "arm-linux-androideabi"
  }
  toolchain_args = {
    current_cpu = "arm"
  }
}

android_clang_toolchain("android_clang_mipsel") {
  if (use_debug_fission && target_os == "android") {
    binary_prefix = "mipsel-linux-android"
  }
  toolchain_args = {
    current_cpu = "mipsel"
  }
}

android_clang_toolchain("android_clang_x64") {
  if (use_debug_fission && target_os == "android") {
    binary_prefix = "x86_64-linux-android"
  }
  toolchain_args = {
    current_cpu = "x64"

    # We lack the libclang_rt.profile library for x86 and x86_64, so we cannot
    # link any binaries that are generated with coverage instrumentation.
    # Therefore we need to turn off 'use_clang_coverage' for this toolchain.
    # TODO(crbug.com/865376)
    use_clang_coverage = false

    # This turns off all of the LaCrOS-specific flags. A LaCrOS related build
    # may use |ash_clang_x64| or |lacros_clang_x64| toolchain, which are
    # chromeos toolchains, to build Ash-Chrome or Lacros-Chrome in a
    # subdirectory, and because chromeos toolchain uses android toolchain, which
    # eventually resulted in that android toolchains being used inside a LaCrOS
    # build.
    also_build_ash_chrome = false
    also_build_lacros_chrome = false
    chromeos_is_browser_only = false
    ozone_platform = ""
    ozone_platform_wayland = false
  }
}

android_clang_toolchain("android_clang_arm64") {
  if (use_debug_fission && target_os == "android") {
    binary_prefix = "aarch64-linux-android"
  }
  toolchain_args = {
    current_cpu = "arm64"
  }
}

android_clang_toolchain("android_clang_arm64_hwasan") {
  if (use_debug_fission && target_os == "android") {
    binary_prefix = "aarch64-linux-android"
  }
  toolchain_args = {
    current_cpu = "arm64"
    is_hwasan = true
    android64_ndk_api_level = 29
  }
}

android_clang_toolchain("android_clang_mips64el") {
  if (use_debug_fission && target_os == "android") {
    binary_prefix = "mips64el-linux-android"
  }
  toolchain_args = {
    current_cpu = "mips64el"
  }
}
