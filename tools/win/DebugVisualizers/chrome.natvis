<?xml version="1.0" encoding="utf-8" ?>
<AutoVisualizer
    xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="gfx::Point">
    <AlternativeType Name="gfx::PointF"/>
    <DisplayString>({x_}, {y_})</DisplayString>
  </Type>
  <Type Name="gfx::Size">
    <AlternativeType Name="gfx::SizeF"/>
    <DisplayString>({width_}, {height_})</DisplayString>
  </Type>
  <Type Name="gfx::Rect">
    <AlternativeType Name="gfx::RectF"/>
    <DisplayString>({origin_.x_}, {origin_.y_}) x ({size_.width_}, {size_.height_})</DisplayString>
  </Type>
  <Type Name="scoped_refptr&lt;*&gt;">
    <SmartPointer Usage="Minimal">ptr_</SmartPointer>
    <DisplayString Condition="ptr_ == 0">null</DisplayString>
    <DisplayString>[{((base::subtle::RefCountedBase*)ptr_)-&gt;ref_count_}] {(void*)ptr_} {*ptr_}</DisplayString>
    <Expand>
      <Item Name="Ptr">ptr_</Item>
      <Item Name="RefCount" Condition="ptr_ != 0">((base::subtle::RefCountedBase*)ptr_)-&gt;ref_count_</Item>
      <ExpandedItem Condition="ptr_ != 0">ptr_</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="absl::optional&lt;*&gt;">
    <DisplayString Condition="!engaged_">(null)</DisplayString>
    <DisplayString>{data_}</DisplayString>
    <Expand>
      <ExpandedItem Condition="engaged_">data_</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="IPC::Message::Header">
    <DisplayString>{{Routing: {routing}, Type: {type}}}</DisplayString>
    <Expand>
      <Item Name="RoutingId">routing</Item>
      <Item Name="Type">type</Item>
      <Synthetic Name="Priority"
                 Condition="(flags &amp; IPC::Message::PRIORITY_MASK) ==
                                IPC::Message::PRIORITY_LOW">
        <DisplayString>Low</DisplayString>
      </Synthetic>
      <Synthetic Name="Priority"
                 Condition="(flags &amp; IPC::Message::PRIORITY_MASK) ==
                                IPC::Message::PRIORITY_NORMAL">
        <DisplayString>Normal</DisplayString>
      </Synthetic>
      <Synthetic Name="Priority"
                 Condition="(flags &amp; IPC::Message::PRIORITY_MASK) ==
                                IPC::Message::PRIORITY_HIGH">
        <DisplayString>High</DisplayString>
      </Synthetic>
      <Synthetic Name="Sync"
                 Condition="(flags &amp; IPC::Message::SYNC_BIT) != 0">
        <DisplayString>true</DisplayString>
      </Synthetic>
      <Synthetic Name="Sync"
                 Condition="(flags &amp; IPC::Message::SYNC_BIT) == 0">
        <DisplayString>false</DisplayString>
      </Synthetic>
      <Synthetic Name="Reply"
                 Condition="(flags &amp; IPC::Message::REPLY_BIT) != 0">
        <DisplayString>true</DisplayString>
      </Synthetic>
      <Synthetic Name="Reply"
                 Condition="(flags &amp; IPC::Message::REPLY_BIT) == 0">
        <DisplayString>false</DisplayString>
      </Synthetic>
      <Synthetic Name="ReplyError"
                 Condition="(flags &amp; IPC::Message::REPLY_ERROR_BIT) != 0">
        <DisplayString>true</DisplayString>
      </Synthetic>
      <Synthetic Name="ReplyError"
                 Condition="(flags &amp; IPC::Message::REPLY_ERROR_BIT) == 0">
        <DisplayString>false</DisplayString>
      </Synthetic>
      <Synthetic Name="Unblock"
                 Condition="(flags &amp; IPC::Message::UNBLOCK_BIT) != 0">
        <DisplayString>true</DisplayString>
      </Synthetic>
      <Synthetic Name="Unblock"
                 Condition="(flags &amp; IPC::Message::UNBLOCK_BIT) == 0">
        <DisplayString>false</DisplayString>
      </Synthetic>
      <Synthetic Name="PumpingMessages"
                 Condition="(flags &amp; IPC::Message::PUMPING_MSGS_BIT) != 0">
        <DisplayString>true</DisplayString>
      </Synthetic>
      <Synthetic Name="PumpingMessages"
                 Condition="(flags &amp; IPC::Message::PUMPING_MSGS_BIT) == 0">
        <DisplayString>false</DisplayString>
      </Synthetic>
      <Synthetic Name="HasSentTime"
                 Condition="(flags &amp; IPC::Message::HAS_SENT_TIME_BIT) != 0">
        <DisplayString>true</DisplayString>
      </Synthetic>
      <Synthetic Name="HasSentTime"
                 Condition="(flags &amp; IPC::Message::HAS_SENT_TIME_BIT) == 0">
        <DisplayString>false</DisplayString>
      </Synthetic>
    </Expand>
  </Type>
  <Type Name="IPC::Message">
    <DisplayString>{{size = {header_size_+capacity_after_header_}}}</DisplayString>
    <Expand>
      <ExpandedItem>*((IPC::Message::Header*)header_),nd</ExpandedItem>
      <Item Name="Payload">(void*)((char*)header_ + header_size_)</Item>
    </Expand>
  </Type>
  <Type Name="base::TimeDelta">
    <DisplayString>{delta_}</DisplayString>
    <Expand>
      <Synthetic Name="Days">
        <DisplayString>{(int)(delta_ / {,,base.dll}base::Time::kMicrosecondsPerDay)}</DisplayString>
      </Synthetic>
      <Synthetic Name="Hours">
        <DisplayString>{(int)(delta_ / {,,base.dll}base::Time::kMicrosecondsPerHour)}</DisplayString>
      </Synthetic>
      <Synthetic Name="Minutes">
        <DisplayString>{(int)(delta_ / {,,base.dll}base::Time::kMicrosecondsPerMinute)}</DisplayString>
      </Synthetic>
      <Synthetic Name="Seconds">
        <DisplayString>{(int)(delta_ / {,,base.dll}base::Time::kMicrosecondsPerSecond)}</DisplayString>
      </Synthetic>
      <Synthetic Name="Milliseconds">
        <DisplayString>{(int)(delta_ / {,,base.dll}base::Time::kMicrosecondsPerMillisecond)}</DisplayString>
      </Synthetic>
      <Item Name="Microseconds">delta_</Item>
    </Expand>
  </Type>
  <Type Name="GURL">
    <DisplayString>{spec_}</DisplayString>
  </Type>
  <Type Name="base::ManualConstructor&lt;*&gt;">
    <!-- $T1 expands to the first "*" in the name which is the template
         type. Use that to cast to the correct value. -->
    <DisplayString>{*($T1*)space_.data_}</DisplayString>
    <Expand>
      <ExpandedItem>*($T1*)space_.data_</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="base::internal::flat_tree&lt;*&gt;">
    <AlternativeType Name="base::flat_set&lt;*&gt;"/>
    <DisplayString>{impl_.body_}</DisplayString>
    <Expand>
      <ExpandedItem>impl_.body_</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="base::flat_map&lt;*&gt;">
    <DisplayString>{impl_.body_}</DisplayString>
    <Expand>
      <ExpandedItem>impl_.body_</ExpandedItem>
    </Expand>
  </Type>
  <Type Name="base::Value" >
    <DisplayString Condition="data_.index_==base::Value::NONE">None</DisplayString>
    <DisplayString Condition="data_.index_==base::Value::BOOLEAN">Boolean {data_.state_.tail.head}</DisplayString>
    <DisplayString Condition="data_.index_==base::Value::INTEGER">Integer {data_.state_.tail.tail.head}</DisplayString>
    <DisplayString Condition="data_.index_==base::Value::DOUBLE">Double {*(double*)data_.state_.tail.tail.tail.head.v}</DisplayString>
    <DisplayString Condition="data_.index_==base::Value::STRING">String {data_.state_.tail.tail.tail.tail.head,na}</DisplayString>
    <DisplayString Condition="data_.index_==base::Value::BINARY">Binary</DisplayString>
    <DisplayString Condition="data_.index_==base::Value::DICTIONARY">Dictionary {data_.state_.tail.tail.tail.tail.tail.tail.head.impl_.body_}</DisplayString>
    <DisplayString Condition="data_.index_==base::Value::LIST">List {data_.state_.tail.tail.tail.tail.tail.tail.head.impl_.body_}</DisplayString>
    <DisplayString Condition="data_.index_==base::Value::DEAD">Dead</DisplayString>
    <DisplayString>Unknown type</DisplayString>
    <Expand >
      <Item Condition="data_.index_==base::Value::BOOLEAN" Name="[Value]">data_.state_.tail.head</Item>
      <Item Condition="data_.index_==base::Value::INTEGER" Name="[Value]">data_.state_.tail.tail.head</Item>
      <Item Condition="data_.index_==base::Value::DOUBLE" Name="[Value]">*(double*)data_.state_.tail.tail.tail.head.v</Item>
      <Item Condition="data_.index_==base::Value::STRING" Name="[String]">data_.state_.tail.tail.tail.tail.head,na</Item>
      <!-- Dictionary -->
      <Item Condition="data_.index_==base::Value::DICTIONARY" Name="[size]">
      data_.state_.tail.tail.tail.tail.tail.tail.head.impl_.body_.__end_ -
      data_.state_.tail.tail.tail.tail.tail.tail.head.impl_.body_.__begin_ </Item>
      <ArrayItems Condition="data_.index_==base::Value::DICTIONARY">
        <Size>
          data_.state_.tail.tail.tail.tail.tail.tail.head.impl_.body_.__end_ -
          data_.state_.tail.tail.tail.tail.tail.tail.head.impl_.body_.__begin_
        </Size>
        <ValuePointer>data_.state_.tail.tail.tail.tail.tail.tail.head.impl_.body_.__begin_</ValuePointer>
      </ArrayItems>
      <!-- List -->
      <Item Condition="data_.index_==base::Value::LIST" Name="[size]">
      data_.state_.tail.tail.tail.tail.tail.tail.head.impl_.body_.__end_ -
      data_.state_.tail.tail.tail.tail.tail.tail.head.impl_.body_.__begin_ </Item>
      <ArrayItems Condition="data_.index_==base::Value::LIST">
        <Size>
          data_.state_.tail.tail.tail.tail.tail.tail.head.impl_.body_.__end_ -
          data_.state_.tail.tail.tail.tail.tail.tail.head.impl_.body_.__begin_
        </Size>
        <ValuePointer>(base::Value*)data_.state_.tail.tail.tail.tail.tail.tail.head.impl_.body_.__begin_</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
</AutoVisualizer>
