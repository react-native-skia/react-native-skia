<!--
Copyright 2020 The Chromium Authors. All rights reserved.
Use of this source code is governed by a BSD-style license that can be
found in the LICENSE file.
-->

<!--
This file is used to generate a comprehensive list of HangWatcher histograms
along with a detailed description for each histogram.

For best practices on writing histogram descriptions, see
https://chromium.googlesource.com/chromium/src.git/+/HEAD/tools/metrics/histograms/README.md

Please follow the instructions in the OWNERS file in this directory to find a
reviewer. If no OWNERS file exists, please consider signing up at
go/reviewing-metrics (Googlers only), as all subdirectories are expected to
have an OWNERS file. As a last resort you can send the CL to
chromium-metrics-reviews@google.com.
-->

<histogram-configuration>

<histograms>

<variants name="ProcessType">
  <variant name="BrowserProcess"/>
  <variant name="RendererProcess"/>
</variants>

<variants name="ThreadType">
  <variant name="IOThread"/>
  <variant name="ThreadPool"/>
  <variant name="UIThread"/>
</variants>

<histogram name="HangWatcher.IsThreadHung.{ProcessType}.{ThreadType}"
    enum="BooleanHung" expires_after="2022-10-23">
  <owner>olivierli@chromium.org</owner>
  <owner>catan-team@chromium.org</owner>
  <summary>
    Every 10 seconds, a boolean is recorded to this histogram to indicate
    whether the {ProcessType} {ThreadType} was hung. The thread is hung if the
    current work unit started running more than 10 seconds ago and this was not
    labeled as &quot;working as intended&quot; by InvalidateActiveExpectations()
    (Prior to 2021-07-09 with IgnoreHangsInScope). Recording is skipped if the
    hang watcher detects an irregular heartbeat (e.g. when the machine sleeps).
  </summary>
  <token key="ProcessType" variants="ProcessType"/>
  <token key="ThreadType" variants="ThreadType"/>
</histogram>

<histogram
    name="HangWatcher.NumberOfHungThreadsDuringWatchWindow.{ProcessType}.{ThreadType}"
    units="threads" expires_after="2021-10-23">
  <obsolete>
    Replaced by HangWatcher.IsThreadHung on 11-2020.
  </obsolete>
  <owner>olivierli@chromium.org</owner>
  <owner>catan-team@chromium.org</owner>
  <summary>
    HangWatcher is a class that periodically watches threads to see if they are
    making progress or if they are hung. This metric is recorded when the
    HangWatcher checks for hangs. It counts the number of threads of type
    {ThreadType} that were hung or became hung during the monitoring period in
    processes of type {ProcessType}. The primary purpose of HangWatcher to
    upload crash reports on hang. Hangs that last for N monitoring periods do
    not produce N crash reports. Every subsequent report after the first one is
    ignored if it pertains to a subset of the same hangs. In contrast this
    metric is recorded after every single monitoring period. This gives more
    weight to hangs that last for longer and also accounts for cascading hangs
    that start as a side-effect of the first recorded one.
  </summary>
  <token key="ProcessType" variants="ProcessType"/>
  <token key="ThreadType" variants="ThreadType"/>
</histogram>

<histogram name="HangWatcher.SleepDrift.{ProcessType}" units="ms"
    expires_after="2021-10-23">
  <owner>olivierli@chromium.org</owner>
  <owner>catan-team@chromium.org</owner>
  <summary>
    HangWatcher is a class that periodically checks on watched threads to see if
    they are making progress or if they are hung. This metric is recorded when
    the HangWatcher resumes from sleeping for its next watch time. The value is
    the time difference between when the HangWatcher woke up and the planned
    wake-up time. Not waking up in time is a bad state. It could be caused by an
    overloaded machine or another problem like system sleep. Knowing whether the
    HangWatcher wakes up in a timely manner in the average case can help analyse
    trial results and is interesting to track over time. An increasing value for
    this histogram could hint at a larger problem and would prevent
    missinterpreting a reduced inflow of hang reports as a improvement when it
    is in fact caused by hindered capabilities.
  </summary>
  <token key="ProcessType" variants="ProcessType"/>
</histogram>

</histograms>

</histogram-configuration>
