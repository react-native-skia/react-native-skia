# ReactSkia Build.gn

declare_args() {
  # Enable API profiling
  rns_enable_api_profiling = false
}

import("//build/config/gclient_args.gni")
config("ReactSkia_config") {
  defines = []
  if(rns_enable_api_profiling) {
    defines += ["RNS_ENABLE_API_PERF"]
  }
  if( react_native_target == "default") {
     print(" ** React Native Target :  Default **")
  } else if( react_native_target == "tvos") {
     print(" ** React Native Target :  TVOS **")
     defines += ["TARGET_OS_TV=1"]
  }
}

config("textlayoutmanager_config") {
  include_dirs = [
    ".",
    "//ReactSkia/textlayoutmanager",
    "//third_party/skia",
    "//skia/config",
  ]
}

import("//react-native/common.gni")
rn_cxx_component("textlayoutmanager") {
  sources = [
    "textlayoutmanager/react/renderer/textlayoutmanager/TextLayoutManager.cpp",
    "textlayoutmanager/RSkTextLayoutManager.cpp",
  ]

  deps = [
     "//folly",
     "//react-native/ReactCommon/react/renderer/attributedstring:attributedstring",
     "//react-native/ReactCommon/react/renderer/graphics:graphics",
     "//react-native/ReactCommon/jsi:JSIDynamic",
     "//skia:skparagraph",
  ]

  with_exceptions = true
  with_rtti = true
  public_configs = [":textlayoutmanager_config"]
}

source_set("ReactSkia") {
  sources = [
    "ComponentViewRegistry.cpp",
    "ComponentViewRegistry.h",
    "LegacyNativeModuleRegistry.cpp",
    "LegacyNativeModuleRegistry.h",
    "JSITurboModuleManager.cpp",
    "JSITurboModuleManager.h",
    "MountingManager.cpp",
    "MountingManager.h",
    "RNInstance.cpp",
    "RNInstance.h",
    "sdk/NotificationCenter.cpp",
    "sdk/NotificationCenter.h",
    "core_modules/RSkEventEmitter.cpp",
    "core_modules/RSkEventEmitter.h",
    "core_modules/RSkTimingModule.h",
    "core_modules/RSkTimingModule.cpp",
    "RSkSurfaceWindow.cpp",
    "RSkSurfaceWindow.h",
    "components/RSkComponent.cpp",
    "components/RSkComponent.h",
    "components/RSkComponentImage.cpp",
    "components/RSkComponentImage.h",
    "components/RSkComponentProvider.h",
    "components/RSkComponentProviderImage.cpp",
    "components/RSkComponentProviderImage.h",
    "components/RSkComponentProviderRootView.cpp",
    "components/RSkComponentProviderRootView.h",
    "components/RSkComponentProviderText.cpp",
    "components/RSkComponentProviderText.h",
    "components/RSkComponentProviderView.cpp",
    "components/RSkComponentProviderView.h",
    "components/RSkComponentRootView.cpp",
    "components/RSkComponentRootView.h",
    "components/RSkComponentText.cpp",
    "components/RSkComponentText.h",
    "components/RSkComponentView.cpp",
    "components/RSkComponentView.h",
    "views/common/RSkDrawUtils.cpp",
    "views/common/RSkDrawUtils.h",
    "views/common/RSkImageCacheManager.cpp",
    "views/common/RSkImageCacheManager.h",
    "views/common/RSkImageUtils.cpp",
    "views/common/RSkImageUtils.h",
  ]

  if (is_mac) {
    sources += [
      "platform/macosx/MainRunLoopEventBeat.h",
      "platform/macosx/MainRunLoopEventBeat.mm",
      "platform/macosx/RCTUtils.h",
      "platform/macosx/RCTUtils.mm",
      "platform/macosx/RuntimeEventBeat.h",
      "platform/macosx/RuntimeEventBeat.mm",
    ]
    defines = ["OS_MACOSX"]
  }
  if (is_linux) {
    sources += [
      "platform/linux/MainRunLoopEventBeat.h",
      "platform/linux/MainRunLoopEventBeat.cpp",
      "platform/linux/RuntimeEventBeat.h",
      "platform/linux/RuntimeEventBeat.cpp",
    ]
    defines = ["OS_LINUX"]
  }

  public_deps = [
    "//third_party/glog:glog",
    "//third_party/libevent",
    "//folly",
    "//folly:async",
    "//folly:synchronization",
    "//react-native/ReactCommon/jsi:jsi",
    "//react-native/ReactCommon/jsi:JSIDynamic",
    "//react-native/ReactCommon/jsi:JSCRuntime",
    "//react-native/ReactCommon/jsiexecutor",
    "//react-native/ReactCommon/callinvoker",
    "//react-native/ReactCommon/runtimeexecutor",
    "//react-native/ReactCommon/yoga",
    "//react-native/ReactCommon/react/nativemodule/core",
    "//react-native/ReactCommon/react/config",
    "//react-native/ReactCommon/react/utils",
    "//react-native/ReactCommon/react/renderer/scheduler",
    "//react-native/ReactCommon/react/renderer/graphics",
    "//react-native/ReactCommon/react/renderer/components/image",
    "//react-native/ReactCommon/react/renderer/components/text",
    "//react-native/ReactCommon/react/renderer/textlayoutmanager",
    "//rns_shell",
    "//skia",
  ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
  configs -= [ "//build/config/compiler:no_rtti" ]
  configs += [ "//build/config/compiler:rtti" ]
  configs -= [ "//build/config/compiler:no_exceptions" ]
  configs += [ "//build/config/compiler:exceptions" ]

  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }

  configs += [ "//react-native/ReactCommon:react_native_config"]

  configs += [
    ":ReactSkia_config",
  ]
}

executable("ReactSkiaApp") {
  sources = [
    "ReactSkiaApp.cpp",
    "ReactSkiaApp.h",
  ]

  deps = [
    ":ReactSkia",
  ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
  configs -= [ "//build/config/compiler:no_exceptions" ]
  configs += [ "//build/config/compiler:exceptions" ]
  configs -= [ "//build/config/compiler:no_rtti" ]
  configs += [ "//build/config/compiler:rtti" ]
  configs += [
    ":ReactSkia_config",
  ]

  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }

  configs += [ "//react-native/ReactCommon:react_native_config"]
}
