#SK App Build GN

if(is_linux) {
  import("//build/config/linux/pkg_config.gni")
}

declare_args() {
  if(is_linux) {
    # x11, wayland, direcftb, libwpe
    gl_display_backend = "x11"

    # Can be true only for X11 backend, others will use egl
    gl_use_glx = true

    # For Embedded systems we will use OpenGL ES
    gl_use_opengl_es = false

    # For platform which doesnt have gpu have to set this to false
    gl_has_gpu = true
  }
}

config("sk_app_config") {
  cflags_cc = [ "-std=c++17", "-frtti"]
  cflags_objcc = [ "-std=c++17" ]
  include_dirs = [ "." ]

  if(is_linux) {
    include_dirs += [
      "unix/",
      "unix/raster/",
      "unix/platform/display/",
      "unix/platform/window/"
    ]

    extra_cppflags = getenv("BUILD_CPPFLAGS")
    if(extra_cppflags != "") {
       defines =  string_split(extra_cppflags)
    }
  }
}

if(is_linux && gl_has_gpu ) {
  pkg_config("use_system_gl") {
    if(gl_use_glx) {
      packages = [ "glx" ]
    } else {
      packages = [ "egl" ]
    }

    if(gl_use_opengl_es) {
      packages += [ "glesv2" ]
    } else {
      packages += [ "gl" ]
    }
    visibility = [ ":sk_app" ]
  }
}

#X11 Platform sources and dependenices
if(is_linux && gl_display_backend == "x11") {

  pkg_config("use_system_x11") {
    packages = [ "x11" ]
    visibility = [ ":sk_app" ]
  }

  x11_platform_source = [
    "unix/platform/window/x11/keysym2ucs.c",
    "unix/platform/window/x11/keysym2ucs.h",
    "unix/platform/display/x11/PlatformDisplayX11.cpp",
    "unix/platform/display/x11/PlatformDisplayX11.h",
    "unix/platform/window/x11/WindowX11.cpp",
  ]
  x11_platform_source += [ "unix/raster/x11/RasterWindowContextX11.cpp"] # X11 Raster
}

#Libwpe Platform sources and dependenices
if(is_linux && gl_display_backend == "libwpe") {

  pkg_config("use_system_libwpe") {
    wpe_interface_version="1.0"
    packages = [
      "wpe-${wpe_interface_version}",
      "glib-2.0",
    ]
    visibility = [ ":sk_app" ]
  }

  libwpe_platform_source = [
    "unix/platform/display/libwpe/PlatformDisplayLibWPE.cpp",
    "unix/platform/display/libwpe/PlatformDisplayLibWPE.h",
    "unix/platform/window/libwpe/WindowLibWPE.cpp",
  ]
  if(gl_has_gpu) {
    libwpe_platform_source += [ "unix/egl/GLWindowContextEGLLibWPE.cpp" ]
  }
  libwpe_platform_source += [ "unix/raster/libwpe/RasterWindowContextLibWPE.cpp"] # LibWPE Raster
}

source_set("sk_app") {
  sources = [
    "Application.h",
    "Window.h",
    "Window.cpp",
    "WindowContext.h",
    "WindowContext.cpp",
    "GrGLUtil.h",
    "GrGLUtil.cpp",
  ]

  if(gl_has_gpu) {
    sources += [
      "GLWindowContext.h",
      "GLWindowContext.cpp",
    ]
  }

  public_deps = [
    "//folly",
    "//folly:async",
    "//skia",
  ]

  frameworks = []

  if (is_mac) {
    sources += [
      "mac/RasterWindowContext_mac.mm",
      "mac/WindowContextFactory_mac.h",
      "mac/Window_mac.h",
      "mac/Window_mac.mm",
      "mac/main_mac.mm",
      "mac/GLWindowContext_mac.mm",
      "mac/GrGLMakeNativeInterface_mac.cpp",
    ]
    frameworks += [
      "QuartzCore.framework",
      "Cocoa.framework",
      "Foundation.framework",
      "OpenGL.framework",
    ]
  }

  if (is_linux) {
     sources += [
        "unix/platform/display/PlatformDisplay.cpp",
        "unix/platform/window/WindowContextFactory.cpp",
        "unix/platform/window/WindowContextFactory.h",
        "unix/Window_unix.cpp",
        "unix/Window_unix.h",
        "unix/main_unix.cpp",
     ]

      defines = [ "OS_LINUX" ]

      # Backend type is x11. It can use either GLX or EGL interface for opengl
      if (gl_display_backend == "x11") {
        sources += x11_platform_source
        configs += [ ":use_system_x11" ]
        defines += [ "SKA_PLATFORM_X11" ]
      } else if (gl_display_backend == "libwpe") { #Libwpe interface based backend. supports only EGL.
        sources += libwpe_platform_source
        configs += [ ":use_system_libwpe" ]
        defines += [
          "SKA_PLATFORM_LIBWPE",
          "USE_WPE_RENDERER",
        ]
      }

      if(gl_has_gpu) {
        if(gl_use_glx && gl_display_backend == "x11") { # Use GLX interface. Only for x11 backend
          sources += [
            "unix/glx/GLWindowContextGLX.cpp",
            "unix/glx/GrGLMakeNativeInterfaceGLX.cpp",
          ]
          defines += [ "USE_GLX" ]
        } else { # Using EGL interface
          sources += [
            "unix/egl/GLWindowContextEGL.cpp",
            "unix/egl/GrGLMakeNativeInterfaceEGL.cpp",
          ]
          if (gl_display_backend == "x11") {
            sources += [ "unix/egl/GLWindowContextEGLX11.cpp"]
          }
          defines += [ "USE_EGL" ]
        }
        configs += [ ":use_system_gl" ]

        # Flag for OpenGL ES
        if(gl_use_opengl_es) {
          defines += [ "USE_OPENGL_ES" ]
        } else {
          defines += [ "USE_OPENGL" ]
        }
        defines += [ "SKA_HAS_GPU_SUPPORT" ]
     }
  }

  configs += [
    ":sk_app_config",
  ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
  configs -= [ "//build/config/compiler:no_exceptions" ]
  configs += [ "//build/config/compiler:exceptions" ]

  if (is_clang) {
    configs -= [ "//build/config/clang:find_bad_constructs" ]
  }
}
